<?php

/**
 * @file
 * Media integration improvements for ELMS Media distro.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function elmsmedia_helper_field_formatter_info_alter(&$info) {
  $info['mediaelement_video']['module'] = 'elmsmedia_helper';
  $info['mediaelement_audio']['module'] = 'elmsmedia_helper';
}

/**
 * Implements hook_init().
 */
function elmsmedia_helper_init() {
  drupal_add_css(drupal_get_path('module', 'elmsmedia_helper') . '/elmsmedia_helper.css');
}

/**
 * Implements hook_field_formatter_view().
 */
function elmsmedia_helper_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // A unique caller per page for the JS specific settings to use. This may be
  // different for ever page view and should not be used for styling.
  static $id = 0;
  $element = array();
  $path = drupal_get_path('module', 'mediaelement');
  foreach ($items as $delta => $item) {
    // Support the link field type which stores it's data in 'url'.
    $src = ($field['type'] == 'link_field') ? $item['url'] : $item['uri'];

    $settings = $display['settings'];
    $js_settings = array();
    $js_settings['opts'] = array();
    $js_settings['controls'] = (bool)$settings['controls'];
    if ($display['type'] == 'mediaelement_video') {
      $js_settings['opts']['videoHeight'] = (int)$settings['height'];
      $js_settings['opts']['videoWidth'] = $settings['width'];
    }
    elseif ($display['type'] == 'mediaelement_audio') {
      $js_settings['opts']['audioHeight'] = (int)$settings['height'];
      $js_settings['opts']['audioWidth'] = $settings['width'];
    }

    $class = 'mediaelement-formatter-identifier-' . time() . '-' . $id++;
    $element[$delta] = array(
      '#attributes' => array(
        'src' => file_create_url($src),
        'class' => $class,
      ),
      '#settings' => $settings,
      '#attached' => array(
        'library' => array(array('mediaelement', 'mediaelement')),
        'js' => array(
          $path . '/mediaelement.js' => array(),
          0 => array('type' => 'setting', 'data' => array('mediaelement' => array('.' . $class => $js_settings))),
        ),
      ),
    );
    if ($settings['controls']) {
      $element[$delta]['#attributes']['controls'] = 'controls';
    }

    if ($display['type'] == 'mediaelement_video') {
      $element[$delta]['#theme'] = 'elmsmedia_helper_video';
      $element[$delta]['#attributes']['height'] = $display['settings']['height'];
      $element[$delta]['#attributes']['width'] = $display['settings']['width'];
      // this is where we deviate from default mediaelement handler
      // this adds the poster image we want that's been uploaded
      if (isset($entity->field_poster['und'])) {
        $element[$delta]['#attributes']['poster'] = file_create_url($entity->field_poster['und'][0]['uri']);
      }
      // helps to set the caption file correctly
      if (isset($entity->field_caption['und'])) {
        $element[$delta]['#settings']['caption'] = file_create_url($entity->field_caption['und'][0]['uri']);  
      }
    }
    elseif ($display['type'] == 'mediaelement_audio') {
      $element[$delta]['#theme'] = 'elmsmedia_helper_audio';
    }
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function elmsmedia_helper_theme() {
  return array(
    'elmsmedia_helper_video' => array(
      'variables' => array('attributes' => array(), 'settings' => array()),
    ),
    'elmsmedia_helper_audio' => array(
      'variables' => array('attributes' => array(), 'settings' => array()),
    ),
  );
}

// callback for elmsmedia_helper_video
function theme_elmsmedia_helper_video($variables) {
  $output = '<div class="mediaelement-video">';
  $output .= '<video ' . drupal_attributes($variables['attributes']) . ' >';
  if (isset($variables['settings']['caption'])) {
    $output .= '<track kind="subtitles" src="'. $variables['settings']['caption'] .'" srclang="en" />';
  }
  $output .= '</video>';
  if ($variables['settings']['download_link']) {
    $output .= '<div class="mediaelement-download-link"><a href="' . $variables['attributes']['src'] . '">' . filter_xss_admin($variables['settings']['download_text']) . '</a></div>';
  }
  $output .= '</div>';
  return $output;
}

// callback for audio rendering
function theme_elmsmedia_helper_audio($variables) {
  $output = '<div class="mediaelement-audio">';
  $output .= '<audio ' . drupal_attributes($variables['attributes']) . ' ></audio>';
  if ($variables['settings']['download_link']) {
    $output .= '<div class="mediaelement-download-link"><a href="' . $variables['attributes']['src'] . '">' . filter_xss_admin($variables['settings']['download_text']) . '</a></div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function elmsmedia_helper_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  $element['controls'] = array(
    '#title' => t('Controls'),
    '#type' => 'checkbox',
    '#default_value' => $settings['controls'],
  );

  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
  );

  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );

  $element['download_link'] = array(
    '#title' => t('Download Link'),
    '#type' => 'checkbox',
    '#default_value' => $settings['download_link'],
  );

  $element['download_text'] = array(
    '#title' => t('Download Link Text'),
    '#type' => 'textfield',
    '#default_value' => $settings['download_text'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function elmsmedia_helper_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  return t('Width: @width, Height: @height', array('@width' => $settings['width'], '@height' => $settings['height']));
}