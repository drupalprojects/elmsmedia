<?php

/**
 * Implementation of hook_init().
 */
function elmsmedia_init() {
  // account for specialized "editor" version of the system
  if (base_path() == '/editor/') {
    drupal_add_js(drupal_get_path('module', 'elmsmedia') . '/editor.js');
  }
  drupal_add_js(drupal_get_path('module', 'elmsmedia') . '/views.js');
  drupal_add_css(drupal_get_path('module', 'elmsmedia') . '/views.css');
}

/**
 * Implementation of hook_block().
 */
function elmsmedia_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Asset count');
      return $blocks;
    break;
    case 'view':
      $block = array();
      switch ($delta) {
        case 0:
          $block['subject'] = t('Asset Count');
          $block['content'] = elmsmedia_block_asset_count();
        break;
      }
      return $block;
    break;
  }
}

/**
 * Callback to render block asset count
 */
function elmsmedia_block_asset_count() {
  $header = array('Asset Type', 'Count');
  $rows = array();
  // get all types, grouped by type
  $types = node_get_types();
  $rows = array();
  $total = 0;
  // loop through available types
  foreach ($types as $type => $type_data) {
    // get a count
    $count = db_result(db_query("SELECT COUNT(type) FROM {node} WHERE type='%s'", $type));
    $rows[] = array($type_data->name, $count);
    $total += $count;
  }
  $rows[] = array(t('Total'), $total);
  return theme('table', $header, $rows);
}

function _elmsmedia_implode_settings($settings) {
  $first = TRUE;
  $output = '';
  foreach($settings as $key => $value) {
      if ($first) {
          $output = $key .'='. $value;
          $first = FALSE;
      } else {
          $output.= '|'. $key .'='. $value;
      }
  }
  return $output;
}

function _elmsmedia_get_treatments() {
  $result = db_query("SELECT nid FROM {node} WHERE type='image_treatment' ORDER BY title");
  while ($val = db_fetch_array($result)) {
    $node = node_load($val['nid']);
    $treatments[$node->title] = $node->field_name[0]['value'];
  }
  return $treatments;
}

function _elmsmedia_form($form_state) {
  global $base_url;
  $node = node_load(arg(1));
  switch ($node->type) {
    case 'document':
      $settings = array(
        'config' => 'basic',
        'file' => $base_url .'/renderdoc/'. $node->nid,
      );
    break;
    case 'flash':
      $settings = array(
        'config' => 'basic',
        'file' => $base_url .'/renderdoc/'. $node->nid,
      );
    break;
    case 'image_treatment' :
      $settings = array(
        'config' => $node->title .'/yes',
        'image' => $base_url .'/renderimage/70',
      );
    break;
    case 'image_gallery':
      $settings = array(
        'config' => $node->field_gallery_type[0]['value'],
        'file' => $base_url .'/rendergallery/'. $node->nid,
      );
    break;
    case 'image':
      $settings = array(
        'config' => 'esg_t1',
        'image' => $base_url .'/renderimage/'. $node->nid,
      );
    break;
    case 'video':
      $config = 'BasePlayer';
      $settings = array(
        'playlistfile' => $base_url .'/player.xml/'. $node->nid,
        'width' => 400,
        'height' => 280,
      );
    break;
  case 'webcam':
      $config = 'BasePlayer';
      $settings = array(
        'playlistfile' => $base_url .'/webcam.xml/'. $node->nid,
        'width' => 400,
        'height' => 320,
      );
    break;
    case 'external_video':
      $config = 'BasePlayer';
      $settings = array(
        'playlistfile' => $base_url .'/player.xml/'. $node->nid,
        'width' => 400,
        'height' => 280,
      );
    break;
    case 'audio':
      $config = 'BaseAudioPlayer';
      $settings = array(
        'playlistfile' => $base_url .'/player.xml/'. $node->nid,
        'width' => 400,
        'height' => 280,
      );
    break;
    case 'playlist':
      $config = 'BasePlaylists';
      $settings = array(
        'playlistfile' => $base_url .'/playlist.xml/'. $node->nid,
        'width' => 680,
        'height' => 550,
      );
    break;  
  }

  //grab settings if they exist
  if (isset($_GET['width']) && $_GET['width'] != '' && $_GET['width'] != 0) {
    $settings['width'] = $_GET['width'];
  }
  
  if (isset($_GET['height']) && $_GET['height'] != '' && $_GET['height'] != 0) {
    $settings['height'] = $_GET['height'];
  }
  
  if (isset($_GET['lightbox']) && $_GET['lightbox'] != '') {
    $settings['lightbox'] = $_GET['lightbox'];
  }
  
  if (isset($_GET['config']) && $_GET['config'] != '') {
    $settings['config'] = $_GET['config'];
  }
  if (isset($_GET['style']) && $_GET['style'] != '') {
    $settings['style'] = $_GET['style'];
  }
  if (isset($_GET['align']) && $_GET['align'] != '') {
    $settings['align'] = $_GET['align'];
  }
  
  $flashVars = $settings;
  $playlist = str_replace('https://', '', str_replace('http://', '', $base_url));
  $flashVars['playlistfile'].= '/'. $playlist;
  
  if ($node->type == 'audio' || $node->type == 'video' || $node->type == 'webcam' || $node->type == 'playlist' || $node->type == 'external_video') {
    //check for vimeo as we can't use jw with it
    if ($node->type == 'external_video' && $node->field_video_url[0]['provider'] == 'vimeo') {
      $render = '<iframe src="http://player.vimeo.com/video/'. $node->field_video_url[0]['value'] .'?title=0&amp;byline=0&amp;portrait=0" width="'. $settings['width'] .'" height="'. $settings['height'] .'" frameborder="0" name="vimeo_'. $node->nid .'" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>';
      $textarea = '<textarea class="elms_embedcode" id="elms_embedcode" rows="2" cols="50">'. $render . '</textarea>';
    }
    else {
      $render = theme('jwplayermodule_render_player', $config, $flashVars);
      $textarea = '<textarea class="elms_embedcode" id="elms_embedcode" rows="2" cols="50">[jwplayer&#124;config='. $config .'|'. _elmsmedia_implode_settings($settings) .']</textarea>';
      $textarea .= '<textarea class="elms_embedcode_2" rows="2" cols="50">Click here if you need to embed outside of drupal. Warning: this is an insecure method</textarea>';
    }
  }
  else {
    $render = theme('elms_media_helper_render', $settings);
    $textarea = '<textarea class="elms_embedcode" id="elms_embedcode" rows="2" cols="50">[elmsmedia&#124;'. _elmsmedia_implode_settings($settings) .']</textarea>';
  $textarea .= '<textarea class="elms_embedcode_2" rows="2" cols="50">Click here if you need to embed outside of drupal. Warning: this is an insecure method</textarea>';
  }
    // Description
  $form['rendered'] = array(
    '#type' => 'fieldset',
    '#title' => t('Output'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -2,
  );
  $form['rendered']['media'] = array(
    '#value' => $render,
  );
  if ($node->type != 'image_treatment' && $node->type != 'image_gallery' && $node->type != 'document' && $node->type != 'flash' && $node->type != 'image') {
    $form['player'] = array(
      '#type' => 'fieldset',
      '#title' => t('Player Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => -1,
    );
    $form['player']['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#size' => 6,
      '#default_value' => $settings['width'],
      '#weight' => 1,
    );
    $form['player']['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#size' => 6,
      '#default_value' => $settings['height'],
      '#weight' => 2,
    );
  }
  elseif ($node->type == 'image') {
    $form['player'] = array(
      '#type' => 'fieldset',
      '#title' => t('Treatment'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => -1,
    );
    $form['player']['config'] = array(
      '#type' => 'select',
      '#title' => t('Select treatment'),
      '#description' => t('Which treatment do you want to use? To create more use '). l(t('Create Image Treatment'),'node/add/image-treatment'),
      '#options' => _elmsmedia_get_treatments(),
      '#default_value' => $settings['config'],
      '#weight' => 4,
    );
    $form['player']['style'] = array(
      '#type' => 'select',
      '#title' => t('Select Color'),
      '#description' => t('Which color set should the image use?'),
      '#options' => array('' => 'Default', 'elms_style1' => 'Style 1', 'elms_style2' => 'Style 2', 'elms_style3' => 'Style 3', 'elms_style4' => 'Style 4', 'elms_style5' => 'Style 5'),
      '#default_value' => $settings['style'],
      '#weight' => 5,
    );
    $form['player']['align'] = array(
      '#type' => 'select',
      '#title' => t('Select Alignment'),
      '#description' => t('Which direction should the image align?'),
      '#options' => array('' => 'Center', 'elms_left-col' => 'Left', 'elms_right-col' => 'Right'),
      '#default_value' => $settings['align'],
      '#weight' => 6,
    );
  }
  if ($node->type != 'image_treatment') {
    if ($node->type == 'image') {
      $form['player']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Generate Image'),
        '#id' => 'generate-player',
        '#weight' => 50,
      );
    }
    elseif ($node->type != 'document' && $node->type != 'flash' && $node->type != 'image_gallery') {
      $form['player']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Generate Player'),
        '#id' => 'generate-player',
        '#weight' => 50,
      );
    }
    $form['embed'] = array(
      '#type' => 'fieldset',
      '#title' => t('Embed Code'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 0,
    );
    $form['embed']['rendered'] = array(  
      '#value' => $textarea,
    );
  }
  $form['#method'] = 'get';
  return $form;
}

function elmsmedia_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $base_url;
  switch ($op) {
    case 'prepare':
    case 'validate':
      if ($node->type == 'image_treatment') {
        drupal_add_js(drupal_get_path('module','elmsmedia') .'/elmsmedia.js');
      }
    break;
    case 'view':
    if ($a3 != 1) {
      drupal_add_js(drupal_get_path('module','elmsmedia') .'/focus.js');
      if ($node->type == 'video' || $node->type == 'image' || $node->type == 'audio' || $node->type == 'playlist' || $node->type == 'webcam' || $node->type == 'external_video' || $node->type == 'image_treatment' || $node->type == 'document' || $node->type == 'image_gallery' || $node->type == 'flash') {        
        $node->content['body']['#value'] = drupal_get_form('_elmsmedia_form') . $node->content['body']['#value'];
      }
      if ($node->type == 'image_treatment') {
        imagecache_preset_flush($node->title);
        imagecache_presets(TRUE);
      }
    }
      //custom "hack" to serve up private files routine instead of traditional download location which is htaccess blocked for fmsvideo / audio, very specific to this environment
      $node->content['body']['#value'] = str_replace('/'. file_directory_path() .'/fmsvideo/','/system/files/fmsvideo/',$node->content['body']['#value']);
      //$node->field_audio['filepath']
      $node->content['body']['#value'] = str_replace('/'. file_directory_path() .'/fmsaudio/','/system/files/fmsaudio/',$node->content['body']['#value']);
    break;
    case 'delete':
      if ($node->type == 'image_treatment') {
        //clean up if a treatment is deleted
        imagecache_preset_delete(imagecache_preset_by_name($node->title));
      }
    break;
    case 'update':
    case 'insert':
      if ($node->type == 'flash') {
        if ($node->field_file[0]['filemime'] == 'application/zip') {
          $zip = new ZipArchive;
          $res = $zip->open($node->field_file[0]['filepath']);
          if ($res === TRUE) {
            $zip->extractTo(''. file_directory_path() .'/flash/node'. $node->nid);
            $zip->close();
          }
        }
      }
      elseif ($node->type == 'image_treatment') {
        $action = array();
        if ($op == 'update') {
          $imagecachepreset = imagecache_preset_by_name($node->title);
        }
        else {
          $imagecachepreset = imagecache_preset_save(array('presetname' => _elmsmedia_clean_title($node->field_name[0]['value'])));
        }
        //Scale action
        $action['presetid'] = $imagecachepreset['presetid'];
        $action['actionid'] = db_result(db_query("SELECT actionid FROM {imagecache_action} WHERE module='elmsmedia' AND (action='imagecache_scale' OR action='imagecache_scale_and_crop' OR action='imagecache_crop' OR action='imagecache_resize') AND presetid=%d", $action['presetid']));
        if ($node->field_units[0]['value'] == 'percentage') {
          $width = $node->field_width[0]['value'] .'%';
          $height = $node->field_height[0]['value'] .'%';
        }
        else {
          $width = $node->field_width[0]['value'];
          $height = $node->field_height[0]['value'];
        }
        if ($node->field_scale_type[0]['value'] == 'imagecache_crop') {
          $action['data'] = array('width' => $width, 'height' => $height, 'xoffset' => 'center', 'yoffset' => 'center');
        }
        elseif ($node->field_scale_type[0]['value'] == 'imagecache_scale') {
          $action['data'] = array('width' => $width, 'height' => $height, 'upscale' => 1);
        }
        else {
          $action['data'] = array('width' => $width, 'height' => $height );
        }
        $action['module'] = 'elmsmedia';
        $action['action'] = $node->field_scale_type[0]['value'];
        $action['weight'] = -1;
        imagecache_action_save($action);
        //color actions
        db_query("DELETE FROM {imagecache_action} WHERE module='elmsmedia' AND (action='imagecache_desaturate' OR action='imagecache_inverse' OR action='imagecache_colorshift') AND presetid=%d",$imagecachepreset['presetid']);
        if ($node->field_color_change[0]['value'] != 'original') {
          $action = array();
          $action['presetid'] = $imagecachepreset['presetid'];
          if ($node->field_color_change[0]['value'] == 'imagecache_colorshift') {
            $action['data'] = array('RGB' => array('HEX' => str_replace('#','',$node->field_color[0]['value'])));
            $action['module'] = 'elmsmedia';
            $action['action'] = $node->field_color_change[0]['value'];
            $action['weight'] = 1;
          }
          else if ($node->field_color_change[0]['value'] == 'sepia') {
            $action = array();
            $action['presetid'] = $imagecachepreset['presetid'];
            $action['data'] = array();
            $action['module'] = 'elmsmedia';
            $action['action'] = 'imagecache_desaturate';
            $action['weight'] = 1;
            imagecache_action_save($action);
            $action = array();
            $action['presetid'] = $imagecachepreset['presetid'];
            $action['data'] = array('RGB' => array('HEX' => '815e46'));
            $action['module'] = 'elmsmedia';
            $action['action'] = 'imagecache_colorshift';
            $action['weight'] = 2;
          }
          else {
            $action['data'] = array();
            $action['module'] = 'elmsmedia';
            $action['action'] = $node->field_color_change[0]['value'];
            $action['weight'] = 1;
          }
          imagecache_action_save($action);
        }
        
        //special effects!
        if ($node->field_treatment[0]['value'] == 'round_corners') {
          _elmsmedia_remove_all_effects($imagecachepreset['presetid'], 'round_corners');
          //set to PNG
          $action = array();
          $action['presetid'] = $imagecachepreset['presetid'];
          $action['actionid'] = db_result(db_query("SELECT actionid FROM {imagecache_action} WHERE module='elmsmedia' AND action='imagecache_convert' AND presetid=%d",$action['presetid']));
          $action['module'] = 'elmsmedia';
          $action['action'] = 'imagecache_convert';
          $action['data'] = array('format' => 'image/png');
          $action['weight'] = 9;
          imagecache_action_save($action);
          //make the corners
          $corner_ary = array(
            'radius' => '8', 
            'independent_corners_set' => array(
              'independent_corners' => 0, 
              'radii' => array(
                'tl' => '',
                'tr' => '',
                'bl' => '',
                'br' => '',
              )
            )
          );
          $action = array();
          $action['presetid'] = $imagecachepreset['presetid'];
          $action['actionid'] = db_result(db_query("SELECT actionid FROM {imagecache_action} WHERE module='elmsmedia' AND action='canvasactions_roundedcorners' AND presetid=%d",$action['presetid']));
          $action['module'] = 'elmsmedia';
          $action['action'] = 'canvasactions_roundedcorners';
          $action['data'] = $corner_ary;
          $action['weight'] = 10;
          imagecache_action_save($action);
        }
        elseif ($node->field_treatment[0]['value'] == 'drop_shadow') {
          _elmsmedia_remove_all_effects($imagecachepreset['presetid']);
          //set to PNG
          $action = array();
          $action['presetid'] = $imagecachepreset['presetid'];
          $action['module'] = 'elmsmedia';
          $action['action'] = 'imagecache_convert';
          $action['data'] = array('format' => 'image/png');
          $action['weight'] = 9;
          imagecache_action_save($action);
          //lay down the shadow
          $action = array();
          $action['presetid'] = $imagecachepreset['presetid'];
          $action['module'] = 'elmsmedia';
          $action['action'] = 'dropshadow';
          $action['data'] = array('path' => 'sites/all/modules/imagecache_dropshadow/image', 'background_color' => '#FFFFFF');
          $action['weight'] = 10;
          imagecache_action_save($action);
        }
        elseif ($node->field_treatment[0]['value'] == 'picture_frame') {
          //this is so complex that I kill the old settings each time to avoid db mix ups
          _elmsmedia_remove_all_effects($imagecachepreset['presetid']);
          //set to PNG
          $action = array();
          $action['presetid'] = $imagecachepreset['presetid'];
          $action['module'] = 'elmsmedia';
          $action['action'] = 'imagecache_convert';
          $action['data'] = array('format' => 'image/png');
          $action['weight'] = 9;
          imagecache_action_save($action);
          //file path for testsuite images
          $filepath = drupal_get_path('module', 'imagecache_testsuite');
          print $filepath;
          $action = array (
            'presetid' => $imagecachepreset['presetid'],
            'weight' => '11',
            'module' => 'elmsmedia',
            'action' => 'canvasactions_definecanvas',
            'data' => array (
              'RGB' => array (
                'HEX' => '651212',
              ),
              'under' => 1,
              'exact' => array (
                'width' => '',
                'height' => '',
                'xpos' => 'center',
                'ypos' => 'center',
              ),
              'relative' =>  array (
                'leftdiff' => '4',
                'rightdiff' => '4',
                'topdiff' => '4',
                'bottomdiff' => '4',
              ),
            ),
          );
          imagecache_action_save($action);
          $action = array (
            'presetid' => $imagecachepreset['presetid'],
                'weight' => '19',
                'module' => 'elmsmedia',
                'action' => 'canvasactions_definecanvas',
                'data' => array (
                  'RGB' =>  array (
                    'HEX' => '',
                  ),
                  'under' => 1,
                  'exact' => array (
                    'width' => '',
                    'height' => '',
                    'xpos' => 'center',
                    'ypos' => 'center',
                  ),
                  'relative' => array (
                    'leftdiff' => '4',
                    'rightdiff' => '4',
                    'topdiff' => '4',
                    'bottomdiff' => '4',
                  ),
                ),
              );
              imagecache_action_save($action);
            $action = array (
            'presetid' => $imagecachepreset['presetid'],
                'weight' => '17',
                'module' => 'elmsmedia',
                'action' => 'canvasactions_file2canvas',
                'data' => array (
                  'xpos' => 'left',
                  'ypos' => 'top',
                  'alpha' => '100',
                  'path' => "$filepath/corner-tl.png",
                ),
              );
              imagecache_action_save($action);
            $action = array (
            'presetid' => $imagecachepreset['presetid'],
                'weight' => '17',
                'module' => 'elmsmedia',
                'action' => 'canvasactions_file2canvas',
                'data' =>  array (
                  'xpos' => 'right',
                  'ypos' => 'top',
                  'alpha' => '100',
                  'path' => "$filepath/corner-tr.png",
                ),
              );
              imagecache_action_save($action);
              $action = array (
            'presetid' => $imagecachepreset['presetid'],
                'weight' => '17',
                'module' => 'elmsmedia',
                'action' => 'canvasactions_file2canvas',
                'data' => array (
                  'xpos' => 'left',
                  'ypos' => 'bottom',
                  'alpha' => '100',
                  'path' => "$filepath/corner-bl.png",
                ),
              );
              imagecache_action_save($action);
              $action = array (
            'presetid' => $imagecachepreset['presetid'],
                'weight' => '17',
                'module' => 'elmsmedia',
                'action' => 'canvasactions_file2canvas',
                'data' => array (
                  'xpos' => 'right',
                  'ypos' => 'bottom',
                  'alpha' => '100',
                  'path' => "$filepath/corner-br.png",
                ),
              );
              imagecache_action_save($action);
              /*$action = array (
            'presetid' => $imagecachepreset['presetid'],
                'weight' => '18',
                'module' => 'elmsmedia',
                'action' => 'imagecache_rotate',
                'data' => array (
                  'degrees' => '0',
                  'random' => 0,
                  'bgcolor' => '',
                ),
              );
              imagecache_action_save($action);*/
              /*$action = array (
            'presetid' => $imagecachepreset['presetid'],
              'weight' => '19',
                'module' => 'elmsmedia',
                'action' => 'imagecache_scale',
                'data' => array (
                  'width' => '300',
                  'height' => '',
                  'upscale' => 0,
                ),
              );
              imagecache_action_save($action);*/
              /*$action = array (
                'presetid' => $imagecachepreset['presetid'],
                'weight' => '20',
                'module' => 'elmsmedia',
                'action' => 'canvasactions_canvas2file',
                'data' => array (
                  'xpos' => '',
                  'ypos' => '',
                  'alpha' => '100',
                  'path' => "",
                  'dimensions' => 'original',
                ),
              );
              imagecache_action_save($action);*/
        }
        else {
          _elmsmedia_remove_all_effects($imagecachepreset['presetid']);
        }
        
        //watermarking the image
        db_query("DELETE FROM {imagecache_action} WHERE module='elmsmedia_watermark' AND presetid=%d",$imagecachepreset['presetid']);
        if ($node->field_watermark_image[0]['filepath'] != '') {
          //split the position value into x and y
          $pos = split('_',$node->field_position[0]['value']);
          $action = array (
            'presetid' => $imagecachepreset['presetid'],
            'weight' => '0',
            'module' => 'elmsmedia_watermark',
            'action' => 'canvasactions_file2canvas',
            'data' => array (
              'path' => $node->field_watermark_image[0]['filepath'],
              'alpha' => $node->field_opacity[0]['value'],
              'xpos' => $pos[1],
              'ypos' => $pos[0],
            ),
          );
          imagecache_action_save($action);
        }
        if ($node->field_write_copyright[0]['value'] != '') {
          
        }
      }
    break;
  }
}

function _elmsmedia_clean_title($title){//function to clean a filename string so it is a valid filename
  $reserved = preg_quote('\/:*?"<>|', '/');//characters that are  illegal on any of the 3 major OS's
  //replaces all characters up through space and all past ~ along with the above reserved characters
  return strtolower(preg_replace("/([\\x00-\\x20\\x7f-\\xff{$reserved}])/e", "_", $title));
}

function _elmsmedia_remove_all_effects($presetid, $exception = '') {
  //remove effects for picture frame
  if ($exception != 'picture_frame') {
    db_query("DELETE FROM {imagecache_action} WHERE module='elmsmedia' AND (action='imagecache_convert' OR action='imagecache_rotate' OR action='canvasactions_file2canvas' OR action='canvasactions_definecanvas') AND presetid=%d",$presetid);
  }
  //remove effects for corners
  if ($exception != 'round_corners') {
    db_query("DELETE FROM {imagecache_action} WHERE module='elmsmedia' AND (action='imagecache_convert' OR action='canvasactions_roundedcorners') AND presetid=%d",$presetid);
  }
  //remove the drop shadow
  if ($exception != 'dropshadow') {
    db_query("DELETE FROM {imagecache_action} WHERE module='elmsmedia' AND action='dropshadow' AND presetid=%d",$presetid);
  }
}

/**
 * Helper function to return stats about each course
 */
function elmsmedia_get_asset_count($tid, $type = 'all') {
  if ($type != 'all') {
    return db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {term_node} AS tn ON tn.vid=n.vid WHERE tn.tid=%d AND n.type='%s'", $tid, $type));
  }
  else {
    return db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {term_node} AS tn ON tn.vid=n.vid WHERE tn.tid=%d AND n.type IN ('audio', 'video', 'document', 'external_video', 'image', 'flash')", $tid));
  }
}

/**
 * Helper function to generate audit stats
 */
function elmsmedia_get_audit_health($tid, $op) {
  switch ($op) {
    case 'caption':
      $total = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {term_node} AS tn ON tn.vid=n.vid WHERE tn.tid=%d AND n.type IN ('audio', 'video')", $tid));
      if ($total != 0) {
        $done = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {term_node} AS tn ON tn.vid=n.vid JOIN {content_field_caption_file} AS cfcf ON cfcf.vid=n.vid WHERE tn.tid=%d AND cfcf.field_caption_file_fid IS NOT NULL", $tid));
        return round(($done / $total) * 100, 2) .'%';
      }
    break;
    case 'transcript':
      $total = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {term_node} AS tn ON tn.vid=n.vid WHERE tn.tid=%d AND n.type IN ('audio', 'video')", $tid));
      if ($total != 0) {
        $done = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {term_node} AS tn ON tn.vid=n.vid JOIN {content_field_transcript_file} AS cftf ON cftf.vid=n.vid WHERE tn.tid=%d AND cftf.field_transcript_file_fid IS NOT NULL", $tid));
        return round(($done / $total) * 100, 2) .'%';
      }
    break;
    case 'citation':
      $total = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {term_node} AS tn ON tn.vid=n.vid WHERE tn.tid=%d AND n.type IN ('audio', 'video', 'image')", $tid));
      if ($total != 0) {
        $done = db_result(db_query("SELECT COUNT(n.nid) FROM {node} AS n JOIN {term_node} AS tn ON tn.vid=n.vid JOIN {content_field_citation} AS cfc ON cfc.vid=n.vid WHERE tn.tid=%d AND cfc.field_citation_value IS NOT NULL AND cfc.field_citation_value NOT IN ('', 'TBD', 'Citation needed', ' ', 'none')", $tid));
        return round(($done / $total) * 100, 2) .'%';
      }
    break;
  }
}